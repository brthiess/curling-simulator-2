@page "/pick-teams"
@inject NavigationManager NavigationManager
@inject SimulationContainer SimulationContainer;
@using System.Net.Http.Json
@inject HttpClient Http
@using CurlingSimulator




<h1 class='page-title pick-teams-title'>Pick Teams</h1>

<p class='pick-teams-text'>Pick @SimulationContainer.Tournament.NumberOfTeams</p>

<ul class='teams-list'>
    @if (rankings != null){
        @foreach (var team in rankings)
        {
            <li class='team-list-item'>
                <input type="checkbox" id="@team.rank" @bind="team.selected" />
                <label class="team-list-item-label" for="@team.rank">
                    <div class="team-list-item-location">
                        <img src="/images/locations/@(team.location).png" />
                    </div>
                    <div class="team-list-item-name">
                        @team.name
                    </div>
                </label>
                
            </li>
        }
    }
</ul>

<button class='done-button continue-button' @onclick="NavigateToSimulationResults">Simulate</button>

@code { 

    private List<TeamRanking> rankings;

    protected override async Task OnInitializedAsync()
    {
        rankings = await Http.GetFromJsonAsync<List<TeamRanking>>("/json/rankings.json");
    }
    private void NavigateToSimulationResults() 
    { 
        RunTournament();
        NavigationManager.NavigateTo("simulation-results"); 
    }

    protected void RunTournament()
    {
        if (SimulationContainer.State != SimulationState.NotStarted)
        {
            SimulationContainer.RestartTournament();
        }
        SimulationContainer.State = SimulationState.Running;
        foreach(var team in rankings)
        {
            if (team.selected)
            {
                SimulationContainer.Tournament.AddTeam(new Team(team.name, null, team.rank));
            }
        }


        for (var i =0; i < 1; i++)
        {
            SimulationContainer.Tournament.Run();
        }
        SimulationContainer.State = SimulationState.Finished;
    }    
}

