@page "/pick-teams"
@inject NavigationManager NavigationManager
@inject SimulationContainer SimulationContainer;
@using System.Net.Http.Json
@inject HttpClient Http
@using CurlingSimulator
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Newtonsoft.Json
@inject PageState PageState;


@if(SimulationContainer == null || SimulationContainer.State == SimulationState.Uninitialized){return;}


<h1 class='page-title pick-teams-title'>Pick Teams</h1>

<p class='pick-teams-text'>@PickTeamsText</p>

<ul class='teams-list'>
    @if (SimulationContainer?.Rankings != null){
        @foreach (var team in SimulationContainer.Rankings)
        {
            <li class='team-list-item @(PickedEnoughTeams() ? "disabled" : "")'>
                <input type="checkbox" id="@team.id" class='team-list-item-checkbox' disabled='@(PickedEnoughTeams() && !team.selected ? "disabled" : null)' @onchange="@(e => UpdateSelectedTeamsCount(team, e.Value))" checked='@(team.selected ? "checked" : null)' />
                <div class='team-list-item-background'></div>
                <label class='team-list-item-label @(PickedEnoughTeams() && !team.selected ? "disabled" : "")' for="@team.id"></label>
                <div class="team-list-item-location">
                    <img src="/images/locations/@(team.countryImage)" />
                </div>
                <div class="team-list-item-name">
                    Team @team.lastName
                </div>
                <div class="team-list-item-fake-checkbox"></div>
                
            </li>
        }
    }
</ul>

<button class='done-button continue-button division-@(CurrentDivisionBeingSelectedFor) @(PickedEnoughTeams() ? "ready" : "")' @onclick="NavigateToSimulationResults">
    <span class="button-main-text">@SimulateButtonText</span>
    <span class='button-sub-text @(SimulationContainer?.Tournament?.NumberOfDivisions == 1 ? "hidden" : "")'>@SimulateButtonSubText</span>
</button>

@code { 

    int SelectedTeamsCount {get;set;} = 0;
    int CurrentDivision {get;set;} = 1;
    int CurrentDivisionBeingSelectedFor {get;set;} = 1;

    private string SimulateButtonText 
    {
        get 
        {
            int numberOfSelectedTeams = GetNumberOfSelectedTeams();
            var simulateButtonText = "Simulate";
            if (numberOfSelectedTeams < SimulationContainer?.Tournament?.NumberOfTeams)
            {
                simulateButtonText = numberOfSelectedTeams + "/" + SimulationContainer.Tournament.NumberOfTeams + " Teams";
            } 
            return simulateButtonText;
        }
    }

    private string SimulateButtonSubText 
    {
        get 
        {
            return "Pool " + CurrentDivisionBeingSelectedFor;
        }
    }

    private string PickTeamsText
    {
        get 
        {
            return "Pick " + SimulationContainer?.Tournament?.NumberOfTeams;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (SimulationContainer.State == SimulationState.Uninitialized)
        {
            var simulationContainerString = await localStorage.GetItemAsStringAsync("SimulationContainer");
            var simulationContainerClone = JsonConvert.DeserializeObject<SimulationContainer>(simulationContainerString);
            SimulationContainer.SetState(simulationContainerClone);
        }
        if (SimulationContainer != null && SimulationContainer.Rankings == null)
        {
            SimulationContainer.Rankings = await Http.GetFromJsonAsync<List<TeamRanking>>(GetJSONPath(SimulationContainer));
        }
        SelectedTeamsCount = GetNumberOfSelectedTeams(false);
        await Task.Delay(100);
        PageState.SetState(LoadingState.Finished, null);
    }

    private string GetJSONPath(SimulationContainer simulationContainer)
    {
        if (simulationContainer.TournamentType == TournamentType.Worlds)
        {
            if (simulationContainer.Gender == Gender.Male)
            {
                return "json/rankings-worlds-men.json";
            }
            else if (simulationContainer.Gender == Gender.Female)
            {
                return "json/rankings-worlds-women.json";
            }
        }
        return "json/rankings.json";
    }

    private void UpdateSelectedTeamsCount(TeamRanking team, object checkedValue)
    {

        if ((bool)checkedValue)
        {
            SelectedTeamsCount++;
            CurrentDivision = (int) Math.Ceiling(((double)SelectedTeamsCount / (double) SimulationContainer.Tournament.NumberOfTeamsPerDivision));
            CurrentDivisionBeingSelectedFor = (int) Math.Ceiling(((double)(SelectedTeamsCount + 1) / (double) SimulationContainer.Tournament.NumberOfTeamsPerDivision));
            team.selected = true;
            team.division = CurrentDivision;
        }
        else 
        {
            SelectedTeamsCount--;
            team.division = null;
            team.selected = false;
        }
    }
    

    private async void NavigateToSimulationResults() 
    {
        if (GetNumberOfSelectedTeams() != SimulationContainer.Tournament.NumberOfTeams)
        {
            return;
        }
        PageState.SetState(LoadingState.Loading, "Simulating tournament...");
        await Task.Delay(4000);
        RunTournament();
        await localStorage.SetItemAsync("SimulationContainer", JsonConvert.SerializeObject(SimulationContainer));
        NavigationManager.NavigateTo("simulation-results"); 
    }

    private int GetNumberOfSelectedTeams(bool useCache = true)
    {
        if (useCache)
        {
            return SelectedTeamsCount;
        }

        int numberOfSelectedTeams = 0;
        foreach(var ranking in SimulationContainer.Rankings)
        {
            if (ranking.selected)
            {
                numberOfSelectedTeams++;
            }
        }
        return numberOfSelectedTeams;
    }

    private bool PickedEnoughTeams(){
        return GetNumberOfSelectedTeams() == SimulationContainer?.Tournament?.NumberOfTeams;
    }

    protected void RunTournament()
    {
        if (SimulationContainer.State != SimulationState.Initialized)
        {
            SimulationContainer.RestartOrInitTournament();
        }
        SimulationContainer.State = SimulationState.Running;
        foreach(var team in SimulationContainer.Rankings)
        {
            if (team.selected)
            {
                SimulationContainer.Tournament.AddTeam(new Team(team.lastName, team.division.HasValue ? team.division.Value : 1, null, team.rank, team.location, team.countryImage));
            }
        }


        SimulationContainer.Tournament.Run();

        SimulationContainer.State = SimulationState.Finished;
    }
}

